02/23

* 리스트
 o [ ]를 이용해서 만들며, 여러개 값을 하나의 변수에 저장/관리
  - 인덱스는 0부터 시작하며 맨 마지막 인덱스는 -1
  - 슬라이싱을 통해 부분 데이터셋을 뽑아 낼 수 있음
  - range(from, to , by): from부터 to 바로 앞까지 by씩 증가되면서 만들어진 list
  - 다차원 리스트 - > numbers_2d_v=[[1,2,3],[10,20,30,40],[1,3,5,7,9],[2,4,6,8,10,12]]
  - +: 두 리스트를 연결, * : 리스트를 곱한 수 만큼 반복, append(): 요소를 맨 뒤에 추가
  - extend(): 리스트를 요소 별로 맨 뒤에 추가, insert(idx, 추가할 내용): 지정된 index 위치에 삽입
 o 인덱싱
  - count(): 리시트에서 데이터의 갯수 반환, index(): 해당 요소의 위치 반환
  - [index]: 인덱스를 이용한 접근
 o 리스트 슬라이싱
  - 원하는 리스트 내용만 추출
  - [from:to:by] : from부터 to 바로 앞까지 by번 증가하는 index 아이템 추출
  - ex) numbers[2:9] # 2부터 9번 인덱스 바로 앞까지(해당 인덱스가 없을 경우 끝까지)
  - 람다식을 이용해서 list의 원하는 데이터 액세스도 가능
  - numbers[0:5]=[111,111,111,111,111,111,] 등의 식을 이용해 요소를 수정할 수 있음
 o 삭제하기
  - pop()    : 가장 마지막 요소가 반환되고 삭제, pop(n) : n번째 요소가 반환되고 삭제
  - remove() : remove(data) 해당 데이터가 삭제
  - del xx[n]
 o 정렬하기
  - numbers.sort() # 기본 정렬 오름차순, sort() 실행 후 리스트가 바뀜
  - numbers[::-1] # 내림차순처럼 보이나 numbers 내림차순으로 정렬된 것이 저장되지 않음
  - numbers.sort(reverse=True) # 내림차순 정렬. 리스트 내용도 적용
  - 리스틑 복제는 .copy()함수 사용

* 튜플
 o ()를 이용해서 만들며 리스트와 유사하지만, 읽기 전용. 수정이 필요없는 데이터타입에서 사용
  - 수정이 불가하므로 튜플에 데이터 추가, 수정, 삭제 불가. 제공되는 함수도 많지 않음
  - 요소가 하나 있는 튜플은 city = ('서울',)처럼 , 필요
  - 여러개 값이 나열될 때는 자동적으로 튜플로 처리

* 딕셔너리(자바에서의 hashMap과 유사)
 o 중괄호({})를 이용해서 딕셔너리 생성. 키(key)-값(value)의 쌍으로 구성된 자료구조
  - 키는 유일한 값(중복허용안함). 키에 리스트는 사용불가. 키에 튜플은 사용가능. 
  - 값은 중복 가능. 모든 데이터 타입이 가능하며 없는 키의 값을 참조하면 에러 발생
  - 인덱스를 이용한 참조는 지원 안함
  - 키 목록에 True와 1은 같은 키 값으로 간주, False와 0은 같은 키 값으로 간주
  - in 연산자 : 키가 있는지 여부를 확인

* 셋
 o 중복 허용하지 않는 집합(순서x)
  - 중괄호({})나 set()함수를 이용해서 셋 생성
  - set(딕셔너리타입의변수) : 딕셔너리변수의 키만 셋에 추가
  - 집합연산자 (교집합 &, 합집합 |, 차집합 -)
  - add함수는 list인수, dictionary 인수가 불가

* enumerate
 o 반복자 또는 순서 객체로 반복문을 처리할 때 인덱스 처리를 해결
  - ex)for idx, name in enumerate(L):
    	print("{}번째 : {}".format(idx,name))


