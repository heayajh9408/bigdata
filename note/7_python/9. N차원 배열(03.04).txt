03/04

* N차원 배열

* 넘파이(Numpy)
 o 배열만들기
  - array()함수를 이용한 리스트 또는 튜플로부터 넘파이 배열 생성
  - zeros(0으로 채워진 배열), ones(1로 구성된 배열), empty(초기내용 임의의며 메모리 상태에 따라 변화)
  - np.arange(from, to, by, type=None) : from부터 by씩 건너뛴 값을 to 앞까지(to미포함) 목록으로 N차원 배열 생성
  - np.linspace(from, to, num) : from부터 to까지(to포함) num개 숫자들을 N차원 배열로 생성
  - 넘파이 배열을 생성하는 기타 함수들 : arange, ones, zeros
  - 특수 라이브러리 함수(ex. random) 이용
 o 넘파이 배열에서의 인덱싱 및 슬라이싱
  - b[0, 1] , b[0, 0:2]
 o 배열의 차원 변경하기
  - a.ravel() : 차원이 풀린 배열을 반환되며 배열이 바뀐 것은 아님
  - a.reshape() : 차원이 수정된 배열을 반환(a는 그대로), -1 가능
  - a.T & a.transpose() : 전치행렬을 반환
  - a.resize() : a의 차원을 수정, -1 불가
 o 기본연산
  - 배열의 요소별 연산: - +, -, *, < 등
  - 행렬의 곱: @, dot(), 
  - 복합대입연산자(+=, *= 등): 배열의 타입을 고려, 새 배열을 생성하지 않고 기존 배열을 수정
  - 배열 요소별 집계: 배열 요소 전체, sum(), min(), max()..
  - 배열 축별 집계: 행별 또는 열별, sum(axis=''), min(axis=''), max(axis='')
 o 브로드캐스팅
  - 브로드 캐스팅하려면 연산의 두 배열에 대한 후미 축의 크기가 동일하거나 둘 중 하나가 1이어야 함
* 배열합치기/분리하기
 o 인덱싱은 벗어난 인덱스 값은 불가하며 슬라이싱은 가능
  - 맨 뒤의 항목부터 음수를 이용해 지정 가능 
 o 두 배열의 쌓아 합치기
  - vstack(tup) : 아래(수직)에 추가하는 방식으로 쌓아 합침
  - hstack(tup) : 옆으로(수평) 추가하는 방식으로 쌓아 합침
  - dstack(tup) : 마지막 축(열)을 쌓아 합침. 열끼리 0면에, 1열끼리 1면, 2열끼리 2면에
  - column_stack(tup) : 1차원 배열을 열단위로 배열하여 2차원 배열로 만듦
  - row_stack(tup) ; vstack()과 같음. 행단위로 쌓아서 생성
  - stack(ary_tup, axis=0) ; axis속성에 따라 넘파이 배열을 합침
	-> ary_tup : 합칠 배열의 모음
	-> axis=0, a,b를 차원이 다르게 합침(면으로) | axis=1, 행끼리 합침 
	-> axis=2, 행들을 열끼리 합침 | axis=-1, 마지막 차원으로 합침
 o 하나의 배열을 여러 개 작은 배열로 분할하기
  - hsplit(ary, indices_or_sections) ; 두번째 축(2차원의 경우 세로축)을 따라 분할
  - vsplit(ary, indices_or_sections) ; 첫번째 축(2차원의 경우 가로축)을 따라 분할
  - dsplit(ary, indices_or_sections) ; 3번째 차원을 나눔
	-> ary : 분할할 배열<br>
	-> indices_or_sections : 정수 또는 1차원 배열 형식 -> 정수의 경우 분할할 배열의 수
  - split(ary, indices_or_sections, axis=?)
	-> axis=0이면, vsplit()과 동일
 	-> axis=1이면, hsplit()과 동일
	-> axis=2이면, 3차원 이상에서 동작하며 dsplit()동일


