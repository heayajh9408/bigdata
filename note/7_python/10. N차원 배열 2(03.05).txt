03/05

* 복사와 뷰
 o 모두 복사 안함
  - b= a 와 같은 단순한 할당은 배열 객체나 데이터의 사본을 만들지 않음
 o 얕은 복사= 뷰(view)
  - 뷰는 동일한 데이터를 공유할 수 있는 다른 객체
  - 동일한 데이터를 보는 새로운 배열 객체를 생성
  - 슬라이싱 할 때 뷰가 반환, 배열을 자르고 할당할 경우 원본 배열의 값이 바뀔 수 있음
 o 깊은 복사 = copy()
  - 배열 및 해당 데이터의 전체 복사본을 생성
  - copy하여 객체 생성 시 생성된 객체가 메모를 직접 소유
  - 생성된 객체와 전 객체는 어떤 것도 공유하지 않음

* 고급인덱싱
 o 인덱스 배열로 인덱싱
  - 배열의 인덱싱을 단일 숫자가 아닌 넘파이 배열을 생성
  - 인덱싱을 이용한 값 변경
  - 논리 배열을 이용한 인덱싱 
 o 다차원 인덱싱
  - 하나 이상의 차원에 대해 인덱스를 제공하여 각 차원에 대한 인덱스 배열은 동일한 모야이어야 함
 o argmax(axis='')
  - 최대값이 있는 곳의 인덱스
 o ix_() 함수
  - N개의 1차원 시퀀스 배열을 입력받아 N차원 N개를 반환

* 선형대수
 o 행렬곱 : @ 또는 np.dot()
 o 역행렬 : np.linalg.inv(x)
 o 전치행렬 : x.T, x.tanspose()
 o nxn 단위행렬 : np.eye(n)
 o 대각합 : np.trace(x)
 o 연립방정식 해 풀기 : np.linalg.solve(a, b)
 o a @ X = y
        -> a의 역행렬 @ a @ X = a의 역행렬 @ y
        -> X = a의 역행렬 @ y
 o A@X = B 
  - (A.T @ A) @ X = A.T @ B 
  - (A.T @ A)의 역행렬 @ (A.T @ A) @ X = (A.T @ A)의 역행렬 @ A.T @ B 
  - X = (A.T @ A)의 역행렬 @ A.T @ B