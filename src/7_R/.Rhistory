table(welfare$income==bp[1], useNA = "ifany")
table(is.na(welfare$income))
summary(welfare$income) # 하위 이상치만 처리한 데이터
# 2.7 성별에 따른 월급 차이 분석을 도표로
temp <- welfare[, c('income','gender')]
temp <- na.omit(temp)
summary(temp)
summaryBy(income~gender, temp, FUN = c(mean, sd))
welfare %>%
group_by(gender) %>%
summarise(mean=mean(income,na.rm=T),
sd=sd(income, na.rm=T))
# 2.7 성별에 따른 월급 차이가 있는지 그래프로 분석
ggplot(welfare, aes(x=gender, y=income)) +
geom_violin()+
geom_point(position = 'jitter', col='yellow', alpha=0.3)+
geom_boxplot(aes(fill=gender), notch = T, width=0.3)+
geom_rug(col='dimgray')+
labs(title = "하위 이상치 처리 후 성별에 따른 수입 분석")+
coord_cartesian(ylim = c(0,1000))
# 2.7 성별에 따른 월급차이가 있는지 통계적 분석
temp<- welfare %>% filter(!is.na(income))
var.test(income~gender, data = temp)
t.test(income~gender, data =temp, var.equal=F)
# 성별에 따른 월급차이가 없다는 가설을 기각한다
# 3.1  birth, income 필드 변수의 이상치와 결측치를 확인한다
b<-boxplot(welfare$birth)$stat
table(welfare$birth)
table(is.na(welfare$birth))
table(welfare$income<=0)
table(is.na(welfare$income))
# 3.2 birth변수를 이용하여 나이를 계산하고 이 값을 age 필드로 추가한다
welfare<- welfare %>%
mutate(age=2015-birth+1)
head(welfare)
# 3.3  x축을 나이, y축을 월급으로 지정하고 나이에 따른 월급의 변화가 표현되도록 막대그래프나 선 그래프로 시각화한다
age_income <- welfare %>%
filter(!is.na(welfare$income)) %>%
group_by(age) %>%
summarise(income.mean= mean(income),
income.sd= sd(income))
ggplot(age_income, aes(x=age, y=income.mean))+
geom_bar(stat = 'identity')
# 3.4 나이에 따른 월급의 차이가 있는지 관계를 분석한다
# 3.4 도표분석
welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean=mean(income, na.rm = T),
income_sd=sd(income, na.rm = T))
# 3.5 그래프로 분석
ggplot(welfare, aes(x=age, y=income))+
geom_violin()+
geom_point(position = 'jitter', col='lightyellow', alpha=0.5)+
geom_boxplot(aes(fill=age), notch = T, width=0.2)
summary(welfare$income)
result <- aov(income~age, data = welfare)
summary(result)
# 3.5 월급을 가장 맣이 받는 나이대
age_income %>%
arrange(-income.mean) %>%
head(5) # 53세에 가장 월급이 많음
# 나이에 따른 월급변화가 없다는 가설을 기각한다
# 4.1 파생변수 agegrade를 필드로 추가한다
welfare<- welfare %>%
mutate(agegrade=ifelse(age<=30,'young',ifelse(age>30 & age<=60, 'middle', 'old')))
# 4.2  agegrade 의 분포를 도표와 그래프로 시각화한다
welfare %>%
group_by(agegrade) %>%
summarise(ratio=n()/nrow(welfare)*100)
welfare %>%
group_by(agegrade) %>%
summarise(ratio=n()/nrow(welfare)*100) %>%
ggplot(aes(x=agegrade, y=ratio, fill=agegrade))+
geom_bar(stat = 'identity')+
scale_x_discrete(limits=c('young', 'middle', 'old'))+
theme(legend.position = 'none')
# 4.3  연령대 별 월급의 boxplot을 시각화한다
welfare %>%
filter(!is.na(income)) %>%
group_by(agegrade) %>%
ggplot(aes(x=agegrade, y=income, fill=agegrade))+
geom_boxplot(notch = T)+
coord_cartesian(ylim = c(0,700))+
scale_x_discrete(limits=c('young', 'middle', 'old'))
# 4.4 실제로 연령대에 따른 월급 차이가 있는지 분석한다
welfare %>%
filter(!is.na(income)) %>%
group_by(agegrade) %>%
summarise(mean=mean(income),
sd=sd(income))
ggplot(welfare, aes(x=agegrade, y=income))+
geom_violin()+
geom_point(position = 'jitter', col='yellow', alpha=0.7)+
geom_boxplot(aes(fill=agegrade), notch = T, width=0.4)+
coord_cartesian(ylim = c(0,400))+
scale_x_discrete(limits=c('young', 'middle', 'old'))
temp <- welfare %>% filter(!is.na(income))
result <- aov(income ~ agegrade, data = temp)
summary(result)
# 연령대에 따른 월급 차이가 없다는 가설을 기각한다
# 5.1 성별, 연령대, 월급 데이터의 결측치를 확인한다
table(is.na(welfare$gender))
table(is.na(welfare$agegrade))
table(is.na(welfare$income))
# 5.2 연령대별, 성별 월급의 평균과 표준편차, 빈도를 출력한다
gender_agegrade_income<-welfare %>%
filter(!is.na(income)) %>%
group_by(agegrade, gender) %>%
summarise(mean= mean(income),
sd= sd(income),
n=n())
gender_agegrade_income
# 5.3 성별에 따른 월급의 차이가 연령대별로 다른지 시각화 한다
welfare %>%
filter(!is.na(income)) %>%
group_by(agegrade, gender) %>%
summarise(mean= mean(income),
sd= sd(income),
n=n()) %>%
ggplot(aes(x=gender, y=mean, fill=gender))+
geom_bar(stat = 'identity')+
facet_wrap(~agegrade)
# 6.1  나이와 성별로 group_by하여 월급평균, 월급표준편차, 월급중앙값, 최소값과 최대값, 빈도을 산출 한다
welfare %>%
filter(!is.na(income)) %>%
group_by(gender, age) %>%
summarise(mean=mean(income),
sd = sd(income),
median= median(income),
min= min(income),
max= max(income),
n=n())
# 6.2  나이에 따른 월급평균의 추이를 아래와 같은 그래프를 시각화하고, 아래의 그래프를 파일로도 출력한다
welfare %>%
filter(!is.na(income)) %>%
group_by(gender, age) %>%
summarise(mean=mean(income),
sd = sd(income),
median= median(income),
min= min(income),
max= max(income),
n=n()) %>%
ggplot(aes(x=age, y=mean, col=gender))+
geom_line()
# 7.1 직업별 월급 평균, 표준편차, 빈도를 평균월급 순으로 정렬하여 출력하여 직업별 월급의 추이를 분석한다
table(is.na(welfare$code_job))
welfare %>%
filter(!is.na(code_job)) %>%
group_by(code_job) %>%
summarise(income.mean= mean(income),
income.sd= sd(income),
n=n()) %>%
arrange(-income.mean)
# 7.2 직업별 월급의 차이를 분석한 후, 상위 소득 10개 직업군을 도표로 출력하고, 아래와 같은 그래
#     시각화한다. 시각화한 그래프는 ggsave함수를 이용하여 top10.png라는 그림파일로 저장
result<- aov(income~ code_job, data = welfare)
summary(result)
# 직업에 따라 월급의 차이가 없다는 가설을 기각한다
job <- read_excel('inData/Koweps/Koweps_Codebook.xlsx')
temp <-left_join(welfare, job, by='code_job')
temp %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income.mean= mean(income),
income.sd= sd(income),
n=n()) %>%
arrange(-income.mean) %>%
head(10) %>%
ggplot(aes(y=reorder(job,income.mean), x=income.mean))+
geom_bar(stat = 'identity')+
labs(title = "상위 소득 10개 직업군",
x= "직업", y= "평균소득")
ggsave('outData/top10.png')
# 7.3 하위 소득 10개 직업군도 도표로 출력하고 시각화한다
temp %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income.mean= mean(income),
income.sd= sd(income),
n=n()) %>%
arrange(-income.mean) %>%
tail(10) %>%
ggplot(aes(y=reorder(job,income.mean), x=income.mean))+
geom_bar(stat = 'identity')+
labs(title = "하위 소득 10개 직업군",
x= "직업", y= "평균소득")
job <- read_excel('inData/Koweps/Koweps_Codebook.xlsx')
temp <-left_join(welfare, job, by='code_job')
# 여성 최빈 직업 상위 10를 추출한다
temp %>%
filter(!is.na(job) & gender=='female') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(-n) %>%
head(10) %>%
ggplot(aes(x=n, y=reorder(job,n)))+
geom_bar(stat = 'identity')+
labs(title ='여성직업상위10')
# 남성 최빈 직업 상위 10를 추출한다
temp %>%
filter(!is.na(job)& gender=='male') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(-n) %>%
head(10) %>%
ggplot(aes(x=n, y=reorder(job, n)))+
geom_bar(stat = 'identity')+
labs(title = '남성직업상위10')
# 9.1 종교 데이터인 religion 필드의 이상치 및 결측치를 확인한다
boxplot(welfare$religion)
table(is.na(welfare$religion))
# 9.2 religion 필드가 1이면 “종교-유”, 2이면 “종교-무”로 데이터를 변경한다
welfare$religion <- factor(ifelse(welfare$religion==1, '종교-유', '종교-무'))
str(welfare$religion)
# 9.3  종교 유무의 빈도를 시각화한다
welfare %>%
group_by(religion) %>%
summarise(n=n()) %>%
ggplot(aes(x=religion, y=n, fill=religion))+
geom_bar(stat = 'identity')
# 9.4  혼인 상태 데이터인 marriage 필드가 1이면 “기혼”, 3이면 “이혼”으로, 그 외는 NA로 값을 같은 marriage_group 파생변수를 추가한다
temp<- welfare %>%
mutate(marriage_group=ifelse(marriage==1, "기혼", ifelse(marriage==3, "이혼", NA)))
# 9.5 종교 유무에 따른 이혼률을 분석한다
tempmarry <- temp %>% filter(!is.na(marriage_group) & !is.na(religion))
table(tempmarry$religion, tempmarry$marriage_group)
religion_marriage  <- tempmarry %>%
filter(!is.na(marriage_group)) %>%
group_by(religion, marriage_group) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100,1))
religion_marriage
# 9.6 분석한 결과를 도표와 그래프로 시각화한다
ggplot(religion_marriage, aes(x=religion, y=n, fill=marriage_group)) +
geom_col(position = "dodge")
var.test(data=tempmarry, marriage~religion)
t.test(data=tempmarry, marriage~religion, var.equal=F)
#p-value가 0.045로 종교유무에 따라 결혼상태가 다소 다를 수 있다.
# 10.1 결측치를 확인한다
table(welfare$code_region, useNA = "ifany")
table(!is.na(welfare$agegrade))
table(!is.na(welfare$code_region))
# 10.2  region 파생변수를 지역명으로 추가한다
ten<-welfare %>%
mutate(region=ifelse(code_region==1, '서울', ifelse(code_region==2, '수도권(인천/경기)', ifelse(code_region==3, '부산/경남/울산',
ifelse(code_region==4, '대구/경북', ifelse(code_region==5, '대전/충남',
ifelse(code_region==6, '강원/충북', '광주/전남/ 전북/제주도')))))))
# 10.3 지역별 연령대 비율을 분석한 도표 및 그래프를 시각화한다
region_agegrade<-ten %>%
group_by(region, agegrade) %>%
summarise(n = n()) %>%   # 지역별, 연령별 인구
mutate(tot_group = sum(n)) %>% # 지역별 인구
mutate(pct = round(n/tot_group*100, 2)) # 지역별 연령대  percent
region_agegrade
ggplot(data=region_agegrade, aes(x=reorder(region, n), y=n, fill=agegrade)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle = 70, vjust=0.7))
ggplot(data=region_agegrade, aes(x=reorder(region, n), y=pct, fill=agegrade)) +
geom_col(position = 'dodge') +
theme(axis.text.x = element_text(angle=70, vjust=0.5))
# 노년층이 많은 지역이 어디인지 시각화한다
oldagegrade_region <- region_agegrade %>%
filter(agegrade=='old') %>%
arrange(desc(pct))
oldagegrade_region
ggplot(data=oldagegrade_region,
aes(x = pct, y=reorder(region, pct))) +geom_col()
#################################
# # # 13장.  웹 데이터 수집 # # #
#################################
# 1. 정적 웹 크롤링 ; 단일 페이지 크롤링 (rvest 패키지 사용)
install.packages("rvest")
library(rvest)
url <- 'https://movie.naver.com/movie/point/af/list.nhn'
text <- read_html(url, encoding = 'CP949')
text
# 영화제목 ; .movie
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
movieInfo
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
nodes
point <- html_text(nodes)
point
# 영화 리뷰 ; .title
nodes <- html_nodes(text, '.title')
nodes
review <- html_text(nodes, trim=TRUE)
review
review <- gsub('\t','', review)
review <- gsub('\n', '', review)
review
review <- unlist(strsplit(review, '중[0-9]{1,2}'))[seq(2,20,2)]
review <- gsub('신고','',review)
review
page <- cbind(title, movieInfo)
page <- cbind(page, point)
page <- cbind(page, review)
# csv 파일로 out
write.csv(page, "outData/movie_review.csv")
write.csv(page, "outData/movie_review1.csv", row.names = F)
write.csv(page, "outData/movie_review1.csv", row.names = F)
# 여러 페이지 정적 웹 크롤링
home <- 'https://movie.naver.com/movie/point/af/list.nhn'
site <- 'https://movie.naver.com/movie/point/af/list.nhn?&page='
movie.review <- NULL
for(i in 1:100){
url <- paste0(site, i);
text <- read_html(url, encoding = 'CP949')
# 영화제목 ; .movie
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(home, movieInfo)
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
point <- html_text(nodes)
# 영화 리뷰 ; .title
nodes <- html_nodes(text, '.title')
review <- html_text(nodes, trim=TRUE)
review <- gsub('\t','', review)
review <- gsub('\n', '', review)
review <- unlist(strsplit(review, '중[0-9]{1,2}'))[seq(2,20,2)]
review <- gsub('신고','',review)
page <- cbind(title, movieInfo)
page <- cbind(page, point)
page <- cbind(page, review)
movie.review <- rbind(movie.review, page)
}
write.csv(movie.review, 'outData/movie_review100page.csv')
library(ggplot2)
library(KoNLP)
library(wordcloud)
# 1~100까지 크롤링 한 영화들 중 평점에 높은 10개를 시각화 하시오.
library(dplyr)
movie <- as.data.frame(movie.review, stringsAsFactors = F)
str(movie)
# movie <- read.csv('outData/movie_review100page.csv', header = TRUE)
movie$point <- as.numeric(movie$point)
result <- movie %>%
group_by(title) %>%
summarise(point.mean = mean(point),
point.sum  = sum(point),
n=n()) %>%
arrange(desc(point.mean), desc(point.sum)) %>%
head(10)
ggplot(result, aes(x=point.sum, y=reorder(title, point.sum)), vjust=1) +
geom_col(aes(fill=title)) +
labs(title = "평점이 높은 top10", x="평점 총점")+
geom_text(aes(label=paste('총점:',point.sum,'평균:',point.mean)), hjust=0) +
coord_cartesian(xlim=c(0,120))  +
theme(axis.title.y = element_blank(),
legend.position = "none")
useNIADic()
movie$review <- gsub('\\W',' ',movie$review)
movie$review <- gsub('[ㄱ-ㅎ]',' ',movie$review)
nouns <- extractNoun(movie$review)
wordcount <- table(unlist(nouns))
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
df_word <- rename(df_word, word=Var1, freq=Freq)
df_word <- filter(df_word, nchar(word)>1)
# 최빈 단어 top20 뽑고 그래프 그리기
top20 <- df_word[order(df_word$freq, decreasing = T),][1:20,]
top20
ggplot(top20, aes(x=freq, y=reorder(word, freq))) +
geom_col() +
geom_text(aes(label=freq), hjust=1, size=3, col='yellow')
set.seed(1234)
display.brewer.all() # palette 이름과 색상들을 한꺼번에 봄
pal <- brewer.pal(8, 'Dark2')
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 5,
max.words = 200,
random.order = F,
rot.per = 0.1,
scale = c(4,0.3),
colors = pal)
rm(list = ls())
# 1~100까지 크롤링 한 영화들 중 평점에 높은 10개를 시각화 하시오.
library(dplyr)
library(ggplot2)
library(KoNLP)
library(wordcloud)
library(rvest)
# 필요한 패키지 다운로드와 로드
install.packages("RSelenium")
library(httr)
library(rvest)
library(RSelenium)
remDr <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remDr$open()
remDr$navigate('https://www.youtube.com')
# 필요한 패키지 다운로드와 로드
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
library(httr)
library(rvest)
library(RSelenium)
remDr <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remDr$open()
# 필요한 패키지 다운로드와 로드
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
library(httr)
library(rvest)
library(RSelenium)
remDr <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remDr$open()
library(RSelenium)
remDr <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remDr$open()
# 예제1. 특정부분에 text를 입력한 후 엔터한 결과를 크롤링
remDr <- remoteDriver(remoteServerAddr = "yourIP", port = 4445L)
# 예제1. 특정부분에 text를 입력한 후 엔터한 결과를 크롤링
remDr <- remoteDriver(remoteServerAddr = "yourIP", port = 4445L)
remDr$open()
# 예제1. 특정부분에 text를 입력한 후 엔터한 결과를 크롤링
remDr <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remDr$open()
# (1) 패키지 준비
install.packages("ggiraphExtra") # 지도 시각화를 위한 패키지
library(ggiraphExtra)
install.packages("mapproj")  # ggChoropleth함수 사용을 위한 패키지
library(mapproj)
install.packages("maps") # map_data함수를 통해 지도 정보 이용
install.packages("maps")
library(maps)
library(ggplot2)
library(tibble) # 행이름(지역명)을 변수로 하기 위한 작업
# (2) 행이름을 변수로
head(USArrests,1)
crime <- rownames_to_column(USArrests, var="state")
class(crime)
head(crime,3)
crime$state <- tolower(crime$state) # 주명을 소문자
head(crime,3)
# (3) 미국 지도 주 정보 가져오기
state_map <- map_data("state")
# (4) 지도 시각화
ggChoropleth(data=crime,        # 지도에 표현할 데이터
aes(fill=Assault,   # 지도에 채워질 변수
map_id=state), # 지역 변수
map=state_map,     # 위도 경도 지도 데이터
interactive = T)   # 인터랙티브 속성성
library(ggiraphExtra)
library(mapproj)
library(maps)
library(ggplot2)
library(tibble) # 행이름(지역명)을 변수로 하기 위한 작업
# (4) 지도 시각화
ggChoropleth(data=crime,        # 지도에 표현할 데이터
aes(fill=Assault,   # 지도에 채워질 변수
map_id=state), # 지역 변수
map=state_map,     # 위도 경도 지도 데이터
interactive = T)   # 인터랙티브 속성성
# 2. 대한민국 시도별 인구, 결핵 환자 수 단계 구분도 만들기
rm(list=ls())
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
head(korpop1)
str(changeCode(korpop1)) # utf-8로 인코딩 된 데이터를 CP949로 변환후 출력
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(korpop1))
head(kormap1)
head(changeCode(kormap1))
head(changeCode(korpop1[,c('name','pop','code')]))
library(ggiraphExtra)
library(ggplot2)
# korpop1$name ; UTF-8을 CP949로
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
# 지도 시각화
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1,
interactive = T)
str(korpop1[,c('pop','code','name')])
head(changeCode(tbc))
tbc$name1 <- iconv(tbc$name1, 'UTF-8','CP949')
tbc$name  <- iconv(tbc$name, 'UTF-8', 'CP949')
head(tbc)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tooltip=name1),
map=kormap1,
interactive = T)
